name: Update Projects
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]
    paths:
      - 'packages/**'
    branches:
      - master

jobs:
  projects:
    name: Update Projects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.head_ref }}
        uses: actions/checkout@v1.2.0
        with:
          fetch-depth: 1

      - name: Read .nvmrc
        run: |
          echo "::set-env name=node-version::$(cat ./.nvmrc)"

      - name: Setup Node.js v${{ env.node-version }}
        uses: actions/setup-node@v1.3.0
        with:
          node-version: ${{ env.node-version }}

      - name: Add yarn global to path
        run: |
          echo "::add-path::$(yarn global bin)"

      - name: Install global dependencies
        run: |
          yarn global add lerna
          echo "::set-env name=packages::$(node -p "JSON.stringify($(lerna la --json).map(({ name }) => name))")"
          echo "::set-env name=changed::$(node -p "JSON.stringify($(lerna ls --since origin/${{ github.base_ref }} --exclude-dependents --json).map(({ name }) => name))")"

      - name: Update Projects
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventAction = ${{ toJson(github.event.action) }};
            const pr = ${{ toJson(github.event.pull_request) }};
            const packages = ${{ env.packages }};
            const changed = ${{ env.changed }};

            const mapNames = (arr, key = 'name') => (
              uniq(flatten(arr).map(item => item[key]))
            );

            const flatten = (...arr) => (
              arr.reduce((out, item) => ([
                ...out,
                ...(Array.isArray(item) ? flatten(...item) : [item]),
              ]), [])
            );

            const uniq = (arr) => (
              Array.from(new Set(arr))
            );

            const sequence = (arr, func) => (
              arr.reduce(async (promise, item) => {
                const prev = await promise;
                const result = await func(item);

                return [
                  ...prev,
                  result,
                ];
              }, Promise.resolve([]))
            );

            const getProjects = async () => {
              const existingProjects = await github.projects.listForRepo({
                ...context.issue,
                state: 'all',
              }).then(({ data }) => data);
              const projectNames = uniq(flatten(mapNames(existingProjects), mapNames(packages)));

              return await sequence(projectNames, projectName => (
                existingProjects.find(({ name }) => name === projectName) ||
                github.projects.createForRepo({
                  ...context.issue,
                  name: projectName,
                }).then(({ data }) => data)
              ))
            };

            const requiredColumnNames = ['To Do', 'In Progress', 'Code Review', 'QA', 'Done'];

            const getColumns = async (project) => {
              const existingColumns = await github.projects.listColumns({
                project_id: project.id,
              }).then(({ data }) => data);
              const columnNames = uniq(flatten(mapNames(existingColumns), requiredColumnNames));
              const columns = await sequence(columnNames, columnName => (
                existingColumns.find(({ name }) => name === columnName) ||
                github.projects.createColumn({
                  project_id: project.id,
                  name: columnName,
                }).then(({ data }) => data)
              ));

              Object.assign(project, { columns });

              return columns;
            };

            const getCards = async (column) => {
              const {
                project,
              } = column;
              const existingCards = await github.projects.listCards({
                column_id: column.id,
              }).then(({ data }) => data);

              const cards = existingCards
                .filter(card => (
                  card.content_id === pr.id &&
                  card.content_type === 'PullRequest'
                ))
                .map(card => ({
                  ...card,
                  project,
                  column,
                }));

              Object.assign(column, { cards });
              Object.assign(project, {
                cards: [
                  ...(project.cards || []),
                  ...cards,
                ],
              });

              return cards;
            };

            const archiveCard = card => (
              github.projects.updateCard({
                card_id: card.id,
                archived: true,
              })
            );

            const projects = await getProjects();

            const columns = await sequence(projects, getColumns)
              .then(result => flatten(result));

            const cards = await sequence(columns, getCards)
              .then(result => flatten(result));

            const targetColumnName = (() => {
              if (eventAction === 'closed') {
                return 'Done';
              }

              if (pr.draft) {
                return 'In Progress';
              }

              return 'Code Review';
            })();

            await sequence(projects, async ({ cards, columns, ...project }) => {
              if (!changed.includes(project.name)) {
                // This project is untouched
                await sequence(cards, archiveCard);
                return;
              }

              const targetColumn = columns
                .find(({ name }) => name === targetColumnName);

              if (cards.length > 0) {
                const [card, ...duplicateCards] = cards;

                // Archive any duplicate cards
                await sequence(duplicateCards, archiveCard);

                // There's an existing card
                if (card.column_id === targetColumn.id) {
                  // The card is where it belongs
                  return;
                }

                // Move card to the target column
                await github.projects.moveCard({
                  card_id: card.id,
                  position: 'top',
                  column_id: targetColumn.id,
                });

                return;
              }

              // Create a new card
              await github.projects.createCard({
                column_id: targetColumn.id,
                content_id: pr.id,
                content_type: 'PullRequest',
              });
            });
