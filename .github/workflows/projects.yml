name: Projects
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]
    paths:
      - 'packages/**'
    branches:
      - master

jobs:
  projects:
    name: Update Projects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.head_ref }}
        uses: actions/checkout@v1.2.0
        with:
          fetch-depth: 1

      - name: Read .nvmrc
        run: |
          echo "::set-env name=node-version::$(cat ./.nvmrc)"

      - name: Setup Node.js v${{ env.node-version }}
        uses: actions/setup-node@v1.3.0
        with:
          node-version: ${{ env.node-version }}

      - name: Add yarn global to path
        run: |
          echo "::add-path::$(yarn global bin)"

      - name: Install global dependencies
        run: |
          yarn global add lerna
          echo "::set-env name=packages::$(node -p "JSON.stringify($(lerna la --json).map(({ name }) => name))")"
          echo "::set-env name=changed::$(node -p "JSON.stringify($(lerna ls --since origin/${{ github.base_ref }} --exclude-dependents --json).map(({ name }) => name))")"

      - name: Update Projects
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventAction = ${{ toJson(github.event.action) }};
            const pr = ${{ toJson(github.event.pull_request) }};
            const packages = ${{ env.packages }};
            const changed = ${{ env.changed }};

            const mapKeys = (arr, key = 'name') => (
                uniq(flatten(arr).map(item => item[key]))
            );

            const flatten = (...arr) => (
                arr.reduce((out, item) => ([
                    ...out,
                    ...(Array.isArray(item) ? flatten(...item) : [item]),
                ]), [])
            );

            const uniq = (arr) => (
                Array.from(new Set(arr))
                    .filter(item => !!item)
            );

            const sequence = (arr, func) => (
                arr.reduce(async (promise, item) => {
                    const prev = await promise;
                    const result = await func(item);

                    return [
                        ...prev,
                        result,
                    ];
                }, Promise.resolve([]))
            );

            const getProjects = async () => {
                const existingProjects = await github.projects.listForRepo({
                    ...context.issue,
                    state: 'all',
                }).then(({ data }) => data);
                const projectNames = uniq(flatten(mapKeys(existingProjects), packages));

                return await sequence(projectNames, projectName => (
                    existingProjects.find(({ name }) => name === projectName) ||
                    github.projects.createForRepo({
                        ...context.issue,
                        name: projectName,
                    }).then(({ data }) => data)
                ))
            };

            const requiredColumnNames = ['To Do', 'In Progress', 'Code Review', 'QA', 'Done'];

            const getColumns = async (project) => {
                const existingColumns = await github.projects.listColumns({
                    project_id: project.id,
                }).then(({ data }) => data);
                const columnNames = uniq(flatten(mapKeys(existingColumns), requiredColumnNames));
                const columns = await sequence(columnNames, columnName => (
                    existingColumns.find(({ name }) => name === columnName) ||
                    github.projects.createColumn({
                        project_id: project.id,
                        name: columnName,
                    }).then(({ data }) => data)
                ));

                columns.forEach((column) => {
                    column.project = project;
                });

                return columns;
            };

            const getCards = async (column) => {
                const existingCards = await github.projects.listCards({
                    column_id: column.id,
                }).then(({ data }) => data);

                const cards = existingCards
                    .filter(card => (
                        card.content_url === pr.issue_url
                    ))
                    .map(card => ({
                        ...card,
                        project: project.column,
                        column,
                    }));

                return cards;
            };

            const archiveCard = card => (
                github.projects.updateCard({
                    card_id: card.id,
                    archived: true,
                })
            );

            const projects = await getProjects();

            const allColumns = await sequence(projects, getColumns)
                .then(result => flatten(result));

            const allCards = await sequence(allColumns, getCards)
                .then(result => flatten(result));

            const targetColumnName = (() => {
                if (eventAction === 'closed') {
                    return 'Done';
                }

                if (pr.draft) {
                    return 'In Progress';
                }

                return 'Code Review';
            })();

            await sequence(projects, async (project) => {
                const columns = allColumns
                    .filter(({
                        project: {
                            id: projectId,
                        },
                    }) => (
                            projectId == project.id
                        ));
                const columnIds = mapKeys(columns, 'id');
                const card = allCards
                    .find(({ column_id }) => (
                        columnIds.some(id => (
                          id == column_id
                        ))
                    ));

                console.dir({
                  project,
                  columns,
                  card,
                }, {
                  colors: true,
                  depth: 3,
                });

                if (!changed.includes(project.name)) {
                    // This project is untouched
                    console.log(`Existing Card doesn't belong in ${project.name}`);
                    await archiveCard(card);
                    return;
                }

                const targetColumn = columns
                    .find(({ name }) => name === targetColumnName);

                if (card) {
                    // There's an existing card
                    console.log(`Existing Card in ${project.name}`);

                    if (card.column_id == targetColumn.id) {
                        console.log(`Existing Card already in ${project.name} (${targetColumn.name})`);
                        // The card is where it belongs
                        return;
                    }

                    // Move card to the target column
                    console.log(`Existing Card moved to ${project.name} (${targetColumn.name})`);
                    await github.projects.moveCard({
                        card_id: card.id,
                        position: 'top',
                        column_id: targetColumn.id,
                    });

                    return;
                }

                // Create a new card
                console.log(`Creating new Card in ${project.name} (${targetColumn.name})`);
                await github.projects.createCard({
                    column_id: targetColumn.id,
                    content_id: pr.id,
                    content_type: 'PullRequest',
                });
            });